-- Create a sequence for id_account
CREATE SEQUENCE accounts_seq
    START WITH 1
    INCREMENT BY 1;

-- Create a sequence for id_order
CREATE SEQUENCE orders_seq
    START WITH 1
    INCREMENT BY 1;

-- Create the accounts table
CREATE TABLE accounts (
    id_account NUMBER PRIMARY KEY, -- We will assign this using the sequence
    login VARCHAR2(255) NOT NULL,
    password VARCHAR2(255) NOT NULL,
    email VARCHAR2(255) NOT NULL,
    phone_number VARCHAR2(20)
);

-- Create a trigger to auto-populate id_account from the sequence
CREATE OR REPLACE TRIGGER accounts_trigger
    BEFORE INSERT ON accounts
    FOR EACH ROW
BEGIN
    -- Automatically set id_account using the accounts_seq
    IF :NEW.id_account IS NULL THEN
        SELECT accounts_seq.NEXTVAL INTO :NEW.id_account FROM dual;
    END IF;
END;
/

-- Create the orders table
CREATE TABLE orders (
    id_order NUMBER PRIMARY KEY, -- This will be auto-generated by the sequence
    id_account NUMBER NOT NULL,
    price DECIMAL(10, 2) NOT NULL,
    order_date DATE NOT NULL,
    FOREIGN KEY (id_account) REFERENCES accounts(id_account) ON DELETE CASCADE
);

-- Create a trigger to auto-populate id_order from the sequence
CREATE OR REPLACE TRIGGER orders_trigger
    BEFORE INSERT ON orders
    FOR EACH ROW
BEGIN
    -- Automatically set id_order using the orders_seq
    IF :NEW.id_order IS NULL THEN
        SELECT orders_seq.NEXTVAL INTO :NEW.id_order FROM dual;
    END IF;
END;
/
